// **********************************************************************
//
// Copyright (c) 2003-2014 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `events.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function(global, r)
{
    var require = typeof(r) === "function" ? r : function(){};
    require("Ice/Object");
    require("Ice/ObjectPrx");
    require("Ice/Operation");
    require("Ice/EnumBase");
    require("Ice/Long");
    require("Ice/HashMap");
    require("Ice/HashUtil");
    require("Ice/ArrayUtil");
    require("Ice/StreamHelpers");
    
    var Ice = global.Ice || {};
    var nice = global.nice ||  {};
    nice.api = nice.api || {};
    nice.api.events = nice.api.events || {};

    /**
     * Event state
     * 
     **/
    nice.api.events.EventLevel = Slice.defineEnum({
        'INFO':0, 'WARNING':1, 'ERROR':2, 'IMPORTANT':3, 'SERIOUS':4,
        'CRITICAL':5});

    nice.api.events.EventState = Slice.defineEnum({
        'OPEN':0, 'ACKNOWLEDGED':1, 'RESOLVED':2});

    nice.api.events.EventResolution = Slice.defineObject(
        function(timestamp, info)
        {
            Ice.Object.call(this);
            this.timestamp = timestamp !== undefined ? timestamp : 0;
            this.info = info !== undefined ? info : null;
        },
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::nice::api::events::EventResolution"
        ],
        -1,
        function(__os)
        {
            __os.writeLong(this.timestamp);
            __os.writeString(this.info);
        },
        function(__is)
        {
            this.timestamp = __is.readLong();
            this.info = __is.readString();
        },
        false);

    nice.api.events.EventResolutionPrx = Slice.defineProxy(Ice.ObjectPrx, nice.api.events.EventResolution.ice_staticId, undefined);

    Slice.defineOperations(nice.api.events.EventResolution, nice.api.events.EventResolutionPrx);

    nice.api.events.EventSourceCommand = Slice.defineObject(
        function(commandUUID, command)
        {
            Ice.Object.call(this);
            this.commandUUID = commandUUID !== undefined ? commandUUID : null;
            this.command = command !== undefined ? command : null;
        },
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::nice::api::events::EventSourceCommand"
        ],
        -1,
        function(__os)
        {
            __os.writeString(this.commandUUID);
            __os.writeString(this.command);
        },
        function(__is)
        {
            this.commandUUID = __is.readString();
            this.command = __is.readString();
        },
        false);

    nice.api.events.EventSourceCommandPrx = Slice.defineProxy(Ice.ObjectPrx, nice.api.events.EventSourceCommand.ice_staticId, undefined);

    Slice.defineOperations(nice.api.events.EventSourceCommand, nice.api.events.EventSourceCommandPrx);

    nice.api.events.NiceEvent = Slice.defineObject(
        function(id, timestamp, level, state, sourceCommand, message, debug, resolution)
        {
            Ice.Object.call(this);
            this.id = id !== undefined ? id : 0;
            this.timestamp = timestamp !== undefined ? timestamp : 0;
            this.level = level !== undefined ? level : nice.api.events.INFO;
            this.state = state !== undefined ? state : nice.api.events.OPEN;
            this.sourceCommand = sourceCommand !== undefined ? sourceCommand : null;
            this.message = message !== undefined ? message : null;
            this.debug = debug !== undefined ? debug : null;
            this.resolution = resolution !== undefined ? resolution : null;
        },
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::nice::api::events::NiceEvent"
        ],
        -1,
        function(__os)
        {
            __os.writeInt(this.id);
            __os.writeLong(this.timestamp);
            nice.api.events.EventLevel.__write(__os, this.level);
            nice.api.events.EventState.__write(__os, this.state);
            __os.writeObject(this.sourceCommand);
            __os.writeString(this.message);
            __os.writeString(this.debug);
            __os.writeObject(this.resolution);
        },
        function(__is)
        {
            var self = this;
            this.id = __is.readInt();
            this.timestamp = __is.readLong();
            this.level = nice.api.events.EventLevel.__read(__is);
            this.state = nice.api.events.EventState.__read(__is);
            __is.readObject(function(__o){ self.sourceCommand = __o; }, nice.api.events.EventSourceCommand);
            this.message = __is.readString();
            this.debug = __is.readString();
            __is.readObject(function(__o){ self.resolution = __o; }, nice.api.events.EventResolution);
        },
        false);

    nice.api.events.NiceEventPrx = Slice.defineProxy(Ice.ObjectPrx, nice.api.events.NiceEvent.ice_staticId, undefined);

    Slice.defineOperations(nice.api.events.NiceEvent, nice.api.events.NiceEventPrx);
    Slice.defineSequence(nice.api.events, "NiceEventArrayHelper", "Ice.ObjectHelper", false, "nice.api.events.NiceEvent");

    nice.api.events.EventsMonitor = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::nice::api::events::EventsMonitor"
        ],
        -1, undefined, undefined, false);

    nice.api.events.EventsMonitorPrx = Slice.defineProxy(Ice.ObjectPrx, nice.api.events.EventsMonitor.ice_staticId, undefined);

    Slice.defineOperations(nice.api.events.EventsMonitor, nice.api.events.EventsMonitorPrx,
    {
        "created": [, , , , , , [["nice.api.events.NiceEvent", true]], , , true, ],
        "acknowledged": [, , , , , , [[3]], , , , ],
        "resolved": [, , , , , , [[3], ["nice.api.events.EventResolution", true]], , , true, ],
        "switchedCurrentExperiment": [, , , , , , [["nice.api.events.NiceEventArrayHelper"]], , , true, ],
        "onSubscribe": [, , , , , , [["nice.api.events.NiceEventArrayHelper"]], , , true, ]
    });
    global.nice = nice;
}
(typeof (global) === "undefined" ? window : global, typeof (require) === "undefined" ? undefined : require));
