// **********************************************************************
//
// Copyright (c) 2003-2014 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `sampleAlignment.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function(global, r)
{
    var require = typeof(r) === "function" ? r : function(){};
    require("Ice/Object");
    require("Ice/ObjectPrx");
    require("Ice/EnumBase");
    require("Ice/Long");
    require("Ice/HashMap");
    require("Ice/HashUtil");
    require("Ice/ArrayUtil");
    require("Ice/StreamHelpers");
    
    var Ice = global.Ice || {};
    require("data");
    
    var nice = global.nice || {};
    nice.api = nice.api || {};
    nice.api.sampleAlignment = nice.api.sampleAlignment || {};

    nice.api.sampleAlignment.CrystalSystem = Slice.defineEnum({
        'TRICLINIC':0, 'MONOCLINIC':1, 'ORTHORHOMBIC':2, 'TETRAGONAL':3, 'TRIGONAL':4,
        'HEXAGONAL':5, 'CUBIC':6});

    nice.api.sampleAlignment.HKLReflection = Slice.defineObject(
        function(id, sampleGeo, sampleIndex, monochromatorThetaHard, monochromatorTwoThetaHard, analyzerThetaHard, analyzerTwoThetaHard, sampleThetaHard, sampleTwoThetaHard, r2AngleHard, r3AngleHard, h, k, l)
        {
            Ice.Object.call(this);
            this.id = id !== undefined ? id : 0;
            this.sampleGeo = sampleGeo !== undefined ? sampleGeo : nice.api.data.TILT;
            this.sampleIndex = sampleIndex !== undefined ? sampleIndex : 0;
            this.monochromatorThetaHard = monochromatorThetaHard !== undefined ? monochromatorThetaHard : 0.0;
            this.monochromatorTwoThetaHard = monochromatorTwoThetaHard !== undefined ? monochromatorTwoThetaHard : 0.0;
            this.analyzerThetaHard = analyzerThetaHard !== undefined ? analyzerThetaHard : 0.0;
            this.analyzerTwoThetaHard = analyzerTwoThetaHard !== undefined ? analyzerTwoThetaHard : 0.0;
            this.sampleThetaHard = sampleThetaHard !== undefined ? sampleThetaHard : 0.0;
            this.sampleTwoThetaHard = sampleTwoThetaHard !== undefined ? sampleTwoThetaHard : 0.0;
            this.r2AngleHard = r2AngleHard !== undefined ? r2AngleHard : 0.0;
            this.r3AngleHard = r3AngleHard !== undefined ? r3AngleHard : 0.0;
            this.h = h !== undefined ? h : 0.0;
            this.k = k !== undefined ? k : 0.0;
            this.l = l !== undefined ? l : 0.0;
        },
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::nice::api::sampleAlignment::HKLReflection"
        ],
        -1,
        function(__os)
        {
            __os.writeInt(this.id);
            nice.api.data.SampleGeometry.__write(__os, this.sampleGeo);
            __os.writeInt(this.sampleIndex);
            __os.writeDouble(this.monochromatorThetaHard);
            __os.writeDouble(this.monochromatorTwoThetaHard);
            __os.writeDouble(this.analyzerThetaHard);
            __os.writeDouble(this.analyzerTwoThetaHard);
            __os.writeDouble(this.sampleThetaHard);
            __os.writeDouble(this.sampleTwoThetaHard);
            __os.writeDouble(this.r2AngleHard);
            __os.writeDouble(this.r3AngleHard);
            __os.writeDouble(this.h);
            __os.writeDouble(this.k);
            __os.writeDouble(this.l);
        },
        function(__is)
        {
            this.id = __is.readInt();
            this.sampleGeo = nice.api.data.SampleGeometry.__read(__is);
            this.sampleIndex = __is.readInt();
            this.monochromatorThetaHard = __is.readDouble();
            this.monochromatorTwoThetaHard = __is.readDouble();
            this.analyzerThetaHard = __is.readDouble();
            this.analyzerTwoThetaHard = __is.readDouble();
            this.sampleThetaHard = __is.readDouble();
            this.sampleTwoThetaHard = __is.readDouble();
            this.r2AngleHard = __is.readDouble();
            this.r3AngleHard = __is.readDouble();
            this.h = __is.readDouble();
            this.k = __is.readDouble();
            this.l = __is.readDouble();
        },
        false);

    nice.api.sampleAlignment.HKLReflectionPrx = Slice.defineProxy(Ice.ObjectPrx, nice.api.sampleAlignment.HKLReflection.ice_staticId, undefined);

    Slice.defineOperations(nice.api.sampleAlignment.HKLReflection, nice.api.sampleAlignment.HKLReflectionPrx);
    Slice.defineDictionary(nice.api.sampleAlignment, "HKLReflectionMap", "HKLReflectionMapHelper", "Ice.IntHelper", "Ice.ObjectHelper", false, false, "nice.api.sampleAlignment.HKLReflection");
    Slice.defineSequence(nice.api.sampleAlignment, "HKLReflectionArrayHelper", "Ice.ObjectHelper", false, "nice.api.sampleAlignment.HKLReflection");

    nice.api.sampleAlignment.HKLReflectionArrayValue = Slice.defineObject(
        function(val)
        {
            nice.api.data.Value.call(this);
            this.val = val !== undefined ? val : null;
        },
        nice.api.data.Value, undefined, 2,
        [
            "::Ice::Object",
            "::nice::api::data::Value",
            "::nice::api::sampleAlignment::HKLReflectionArrayValue"
        ],
        -1,
        function(__os)
        {
            nice.api.sampleAlignment.HKLReflectionArrayHelper.write(__os, this.val);
        },
        function(__is)
        {
            this.val = nice.api.sampleAlignment.HKLReflectionArrayHelper.read(__is);
        },
        false);

    nice.api.sampleAlignment.HKLReflectionArrayValuePrx = Slice.defineProxy(nice.api.data.ValuePrx, nice.api.sampleAlignment.HKLReflectionArrayValue.ice_staticId, undefined);

    Slice.defineOperations(nice.api.sampleAlignment.HKLReflectionArrayValue, nice.api.sampleAlignment.HKLReflectionArrayValuePrx);
    Slice.defineDictionary(nice.api.sampleAlignment, "IntToHKLReflectionArrayMap", "IntToHKLReflectionArrayMapHelper", "Ice.IntHelper", "nice.api.sampleAlignment.HKLReflectionArrayHelper", false, false);

    nice.api.sampleAlignment.IntToHKLReflectionArrayMapValue = Slice.defineObject(
        function(val)
        {
            nice.api.data.Value.call(this);
            this.val = val !== undefined ? val : null;
        },
        nice.api.data.Value, undefined, 2,
        [
            "::Ice::Object",
            "::nice::api::data::Value",
            "::nice::api::sampleAlignment::IntToHKLReflectionArrayMapValue"
        ],
        -1,
        function(__os)
        {
            nice.api.sampleAlignment.IntToHKLReflectionArrayMapHelper.write(__os, this.val);
        },
        function(__is)
        {
            this.val = nice.api.sampleAlignment.IntToHKLReflectionArrayMapHelper.read(__is);
        },
        false);

    nice.api.sampleAlignment.IntToHKLReflectionArrayMapValuePrx = Slice.defineProxy(nice.api.data.ValuePrx, nice.api.sampleAlignment.IntToHKLReflectionArrayMapValue.ice_staticId, undefined);

    Slice.defineOperations(nice.api.sampleAlignment.IntToHKLReflectionArrayMapValue, nice.api.sampleAlignment.IntToHKLReflectionArrayMapValuePrx);

    nice.api.sampleAlignment.SampleGeometryFitResults = Slice.defineObject(
        function(values, success, quality, warnings)
        {
            Ice.Object.call(this);
            this.values = values !== undefined ? values : null;
            this.success = success !== undefined ? success : false;
            this.quality = quality !== undefined ? quality : 0.0;
            this.warnings = warnings !== undefined ? warnings : null;
        },
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::nice::api::sampleAlignment::SampleGeometryFitResults"
        ],
        -1,
        function(__os)
        {
            nice.api.data.StringToDoubleMapHelper.write(__os, this.values);
            __os.writeBool(this.success);
            __os.writeDouble(this.quality);
            nice.api.data.StringArrayHelper.write(__os, this.warnings);
        },
        function(__is)
        {
            this.values = nice.api.data.StringToDoubleMapHelper.read(__is);
            this.success = __is.readBool();
            this.quality = __is.readDouble();
            this.warnings = nice.api.data.StringArrayHelper.read(__is);
        },
        false);

    nice.api.sampleAlignment.SampleGeometryFitResultsPrx = Slice.defineProxy(Ice.ObjectPrx, nice.api.sampleAlignment.SampleGeometryFitResults.ice_staticId, undefined);

    Slice.defineOperations(nice.api.sampleAlignment.SampleGeometryFitResults, nice.api.sampleAlignment.SampleGeometryFitResultsPrx);

    nice.api.sampleAlignment.SampleGeometryFitResultsValue = Slice.defineObject(
        function(val)
        {
            nice.api.data.Value.call(this);
            this.val = val !== undefined ? val : null;
        },
        nice.api.data.Value, undefined, 2,
        [
            "::Ice::Object",
            "::nice::api::data::Value",
            "::nice::api::sampleAlignment::SampleGeometryFitResultsValue"
        ],
        -1,
        function(__os)
        {
            __os.writeObject(this.val);
        },
        function(__is)
        {
            var self = this;
            __is.readObject(function(__o){ self.val = __o; }, nice.api.sampleAlignment.SampleGeometryFitResults);
        },
        false);

    nice.api.sampleAlignment.SampleGeometryFitResultsValuePrx = Slice.defineProxy(nice.api.data.ValuePrx, nice.api.sampleAlignment.SampleGeometryFitResultsValue.ice_staticId, undefined);

    Slice.defineOperations(nice.api.sampleAlignment.SampleGeometryFitResultsValue, nice.api.sampleAlignment.SampleGeometryFitResultsValuePrx);

    nice.api.sampleAlignment.UCalcResults = Slice.defineObject(
        function(q0, q1, q2, q3, calcReflections, warnings)
        {
            Ice.Object.call(this);
            this.q0 = q0 !== undefined ? q0 : 0.0;
            this.q1 = q1 !== undefined ? q1 : 0.0;
            this.q2 = q2 !== undefined ? q2 : 0.0;
            this.q3 = q3 !== undefined ? q3 : 0.0;
            this.calcReflections = calcReflections !== undefined ? calcReflections : null;
            this.warnings = warnings !== undefined ? warnings : null;
        },
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::nice::api::sampleAlignment::UCalcResults"
        ],
        -1,
        function(__os)
        {
            __os.writeDouble(this.q0);
            __os.writeDouble(this.q1);
            __os.writeDouble(this.q2);
            __os.writeDouble(this.q3);
            nice.api.sampleAlignment.HKLReflectionMapHelper.write(__os, this.calcReflections);
            nice.api.data.StringArrayHelper.write(__os, this.warnings);
        },
        function(__is)
        {
            this.q0 = __is.readDouble();
            this.q1 = __is.readDouble();
            this.q2 = __is.readDouble();
            this.q3 = __is.readDouble();
            this.calcReflections = nice.api.sampleAlignment.HKLReflectionMapHelper.read(__is);
            this.warnings = nice.api.data.StringArrayHelper.read(__is);
        },
        false);

    nice.api.sampleAlignment.UCalcResultsPrx = Slice.defineProxy(Ice.ObjectPrx, nice.api.sampleAlignment.UCalcResults.ice_staticId, undefined);

    Slice.defineOperations(nice.api.sampleAlignment.UCalcResults, nice.api.sampleAlignment.UCalcResultsPrx);

    nice.api.sampleAlignment.UCalcResultsValue = Slice.defineObject(
        function(val)
        {
            nice.api.data.Value.call(this);
            this.val = val !== undefined ? val : null;
        },
        nice.api.data.Value, undefined, 2,
        [
            "::Ice::Object",
            "::nice::api::data::Value",
            "::nice::api::sampleAlignment::UCalcResultsValue"
        ],
        -1,
        function(__os)
        {
            __os.writeObject(this.val);
        },
        function(__is)
        {
            var self = this;
            __is.readObject(function(__o){ self.val = __o; }, nice.api.sampleAlignment.UCalcResults);
        },
        false);

    nice.api.sampleAlignment.UCalcResultsValuePrx = Slice.defineProxy(nice.api.data.ValuePrx, nice.api.sampleAlignment.UCalcResultsValue.ice_staticId, undefined);

    Slice.defineOperations(nice.api.sampleAlignment.UCalcResultsValue, nice.api.sampleAlignment.UCalcResultsValuePrx);

    nice.api.sampleAlignment.UFitResults = Slice.defineObject(
        function(q0, q1, q2, q3, calcReflections, warnings, success, fitQuality)
        {
            nice.api.sampleAlignment.UCalcResults.call(this, q0, q1, q2, q3, calcReflections, warnings);
            this.success = success !== undefined ? success : false;
            this.fitQuality = fitQuality !== undefined ? fitQuality : 0.0;
        },
        nice.api.sampleAlignment.UCalcResults, undefined, 2,
        [
            "::Ice::Object",
            "::nice::api::sampleAlignment::UCalcResults",
            "::nice::api::sampleAlignment::UFitResults"
        ],
        -1,
        function(__os)
        {
            __os.writeBool(this.success);
            __os.writeDouble(this.fitQuality);
        },
        function(__is)
        {
            this.success = __is.readBool();
            this.fitQuality = __is.readDouble();
        },
        false);

    nice.api.sampleAlignment.UFitResultsPrx = Slice.defineProxy(nice.api.sampleAlignment.UCalcResultsPrx, nice.api.sampleAlignment.UFitResults.ice_staticId, undefined);

    Slice.defineOperations(nice.api.sampleAlignment.UFitResults, nice.api.sampleAlignment.UFitResultsPrx);

    nice.api.sampleAlignment.HKLMotorPositions = Slice.defineObject(
        function(sampleTheta, sampleTwoTheta, chi, phi, lowerTilt, upperTilt)
        {
            Ice.Object.call(this);
            this.sampleTheta = sampleTheta !== undefined ? sampleTheta : 0.0;
            this.sampleTwoTheta = sampleTwoTheta !== undefined ? sampleTwoTheta : 0.0;
            this.chi = chi !== undefined ? chi : 0.0;
            this.phi = phi !== undefined ? phi : 0.0;
            this.lowerTilt = lowerTilt !== undefined ? lowerTilt : 0.0;
            this.upperTilt = upperTilt !== undefined ? upperTilt : 0.0;
        },
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::nice::api::sampleAlignment::HKLMotorPositions"
        ],
        -1,
        function(__os)
        {
            __os.writeDouble(this.sampleTheta);
            __os.writeDouble(this.sampleTwoTheta);
            __os.writeDouble(this.chi);
            __os.writeDouble(this.phi);
            __os.writeDouble(this.lowerTilt);
            __os.writeDouble(this.upperTilt);
        },
        function(__is)
        {
            this.sampleTheta = __is.readDouble();
            this.sampleTwoTheta = __is.readDouble();
            this.chi = __is.readDouble();
            this.phi = __is.readDouble();
            this.lowerTilt = __is.readDouble();
            this.upperTilt = __is.readDouble();
        },
        false);

    nice.api.sampleAlignment.HKLMotorPositionsPrx = Slice.defineProxy(Ice.ObjectPrx, nice.api.sampleAlignment.HKLMotorPositions.ice_staticId, undefined);

    Slice.defineOperations(nice.api.sampleAlignment.HKLMotorPositions, nice.api.sampleAlignment.HKLMotorPositionsPrx);

    nice.api.sampleAlignment.HKLMotorPositionsInput = Slice.defineObject(
        function(h, k, l, ei, ef, a, b, c, alpha, beta, gamma, sampleGeometry, strategy, useAlternateOrientation, useAlternateAngles, scatteringSenseTheta, scatteringSenseChi, scatteringSensePhi, scatteringSenseUpperTilt, scatteringSenseLowerTilt, scatteringPlaneHKL1, scatteringPlaneHKL2, scatteringPlaneTolerance, strategicChi, strategicPhi, strategicUpperTilt, strategicLowerTilt, lowerCutSampleTheta, lowerCutSampleTwoTheta, lowerCutChi, lowerCutPhi, lowerCutUpperTilt, lowerCutLowerTilt, uQuaternion)
        {
            Ice.Object.call(this);
            this.h = h !== undefined ? h : 0.0;
            this.k = k !== undefined ? k : 0.0;
            this.l = l !== undefined ? l : 0.0;
            this.ei = ei !== undefined ? ei : 0.0;
            this.ef = ef !== undefined ? ef : 0.0;
            this.a = a !== undefined ? a : 0.0;
            this.b = b !== undefined ? b : 0.0;
            this.c = c !== undefined ? c : 0.0;
            this.alpha = alpha !== undefined ? alpha : 0.0;
            this.beta = beta !== undefined ? beta : 0.0;
            this.gamma = gamma !== undefined ? gamma : 0.0;
            this.sampleGeometry = sampleGeometry !== undefined ? sampleGeometry : nice.api.data.TILT;
            this.strategy = strategy !== undefined ? strategy : nice.api.data.STRICT_SCATTERING_PLANE;
            this.useAlternateOrientation = useAlternateOrientation !== undefined ? useAlternateOrientation : false;
            this.useAlternateAngles = useAlternateAngles !== undefined ? useAlternateAngles : false;
            this.scatteringSenseTheta = scatteringSenseTheta !== undefined ? scatteringSenseTheta : 0;
            this.scatteringSenseChi = scatteringSenseChi !== undefined ? scatteringSenseChi : 0;
            this.scatteringSensePhi = scatteringSensePhi !== undefined ? scatteringSensePhi : 0;
            this.scatteringSenseUpperTilt = scatteringSenseUpperTilt !== undefined ? scatteringSenseUpperTilt : 0;
            this.scatteringSenseLowerTilt = scatteringSenseLowerTilt !== undefined ? scatteringSenseLowerTilt : 0;
            this.scatteringPlaneHKL1 = scatteringPlaneHKL1 !== undefined ? scatteringPlaneHKL1 : null;
            this.scatteringPlaneHKL2 = scatteringPlaneHKL2 !== undefined ? scatteringPlaneHKL2 : null;
            this.scatteringPlaneTolerance = scatteringPlaneTolerance !== undefined ? scatteringPlaneTolerance : 0.0;
            this.strategicChi = strategicChi !== undefined ? strategicChi : 0.0;
            this.strategicPhi = strategicPhi !== undefined ? strategicPhi : 0.0;
            this.strategicUpperTilt = strategicUpperTilt !== undefined ? strategicUpperTilt : 0.0;
            this.strategicLowerTilt = strategicLowerTilt !== undefined ? strategicLowerTilt : 0.0;
            this.lowerCutSampleTheta = lowerCutSampleTheta !== undefined ? lowerCutSampleTheta : 0.0;
            this.lowerCutSampleTwoTheta = lowerCutSampleTwoTheta !== undefined ? lowerCutSampleTwoTheta : 0.0;
            this.lowerCutChi = lowerCutChi !== undefined ? lowerCutChi : 0.0;
            this.lowerCutPhi = lowerCutPhi !== undefined ? lowerCutPhi : 0.0;
            this.lowerCutUpperTilt = lowerCutUpperTilt !== undefined ? lowerCutUpperTilt : 0.0;
            this.lowerCutLowerTilt = lowerCutLowerTilt !== undefined ? lowerCutLowerTilt : 0.0;
            this.uQuaternion = uQuaternion !== undefined ? uQuaternion : null;
        },
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::nice::api::sampleAlignment::HKLMotorPositionsInput"
        ],
        -1,
        function(__os)
        {
            __os.writeDouble(this.h);
            __os.writeDouble(this.k);
            __os.writeDouble(this.l);
            __os.writeDouble(this.ei);
            __os.writeDouble(this.ef);
            __os.writeDouble(this.a);
            __os.writeDouble(this.b);
            __os.writeDouble(this.c);
            __os.writeDouble(this.alpha);
            __os.writeDouble(this.beta);
            __os.writeDouble(this.gamma);
            nice.api.data.SampleGeometry.__write(__os, this.sampleGeometry);
            nice.api.data.HklStrategy.__write(__os, this.strategy);
            __os.writeBool(this.useAlternateOrientation);
            __os.writeBool(this.useAlternateAngles);
            __os.writeInt(this.scatteringSenseTheta);
            __os.writeInt(this.scatteringSenseChi);
            __os.writeInt(this.scatteringSensePhi);
            __os.writeInt(this.scatteringSenseUpperTilt);
            __os.writeInt(this.scatteringSenseLowerTilt);
            nice.api.data.DoubleArrayHelper.write(__os, this.scatteringPlaneHKL1);
            nice.api.data.DoubleArrayHelper.write(__os, this.scatteringPlaneHKL2);
            __os.writeDouble(this.scatteringPlaneTolerance);
            __os.writeDouble(this.strategicChi);
            __os.writeDouble(this.strategicPhi);
            __os.writeDouble(this.strategicUpperTilt);
            __os.writeDouble(this.strategicLowerTilt);
            __os.writeDouble(this.lowerCutSampleTheta);
            __os.writeDouble(this.lowerCutSampleTwoTheta);
            __os.writeDouble(this.lowerCutChi);
            __os.writeDouble(this.lowerCutPhi);
            __os.writeDouble(this.lowerCutUpperTilt);
            __os.writeDouble(this.lowerCutLowerTilt);
            nice.api.data.DoubleArrayHelper.write(__os, this.uQuaternion);
        },
        function(__is)
        {
            this.h = __is.readDouble();
            this.k = __is.readDouble();
            this.l = __is.readDouble();
            this.ei = __is.readDouble();
            this.ef = __is.readDouble();
            this.a = __is.readDouble();
            this.b = __is.readDouble();
            this.c = __is.readDouble();
            this.alpha = __is.readDouble();
            this.beta = __is.readDouble();
            this.gamma = __is.readDouble();
            this.sampleGeometry = nice.api.data.SampleGeometry.__read(__is);
            this.strategy = nice.api.data.HklStrategy.__read(__is);
            this.useAlternateOrientation = __is.readBool();
            this.useAlternateAngles = __is.readBool();
            this.scatteringSenseTheta = __is.readInt();
            this.scatteringSenseChi = __is.readInt();
            this.scatteringSensePhi = __is.readInt();
            this.scatteringSenseUpperTilt = __is.readInt();
            this.scatteringSenseLowerTilt = __is.readInt();
            this.scatteringPlaneHKL1 = nice.api.data.DoubleArrayHelper.read(__is);
            this.scatteringPlaneHKL2 = nice.api.data.DoubleArrayHelper.read(__is);
            this.scatteringPlaneTolerance = __is.readDouble();
            this.strategicChi = __is.readDouble();
            this.strategicPhi = __is.readDouble();
            this.strategicUpperTilt = __is.readDouble();
            this.strategicLowerTilt = __is.readDouble();
            this.lowerCutSampleTheta = __is.readDouble();
            this.lowerCutSampleTwoTheta = __is.readDouble();
            this.lowerCutChi = __is.readDouble();
            this.lowerCutPhi = __is.readDouble();
            this.lowerCutUpperTilt = __is.readDouble();
            this.lowerCutLowerTilt = __is.readDouble();
            this.uQuaternion = nice.api.data.DoubleArrayHelper.read(__is);
        },
        false);

    nice.api.sampleAlignment.HKLMotorPositionsInputPrx = Slice.defineProxy(Ice.ObjectPrx, nice.api.sampleAlignment.HKLMotorPositionsInput.ice_staticId, undefined);

    Slice.defineOperations(nice.api.sampleAlignment.HKLMotorPositionsInput, nice.api.sampleAlignment.HKLMotorPositionsInputPrx);
    global.nice = nice;
}
(typeof (global) === "undefined" ? window : global, typeof (require) === "undefined" ? undefined : require));
